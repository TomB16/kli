#!/bin/bash

#
# This file is part of videokit-kde.
# Copyright (C) 2025 Tom Brown
#
# videokit-kde is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# videokit-kde is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#


# kli-lib

[[ -n "${__KLI_LIB_SH__}" ]] && return ; readonly __KLI_LIB_SH__=1


source bashdev-app
source bashdev-string


# configs

CONFIG_GLOBAL=/usr/share/kli/kli.conf
CONFIG_USER=~/.config/kli/kli.conf
CONFIG_USER="${CONFIG_USER/#~/$HOME}"
CONFIG_LOCAL=""


# configuration

kli::configLoad() {

    # load a few global vars

	KLI_DEV_ROOT_DIR=$(    	 app::configVar KLI DEV_ROOT_DIR     );	KLI_DEV_ROOT_DIR="${KLI_DEV_ROOT_DIR:-~/Development}"
	KLI_DEV_ROOT_DIR=$( string::stripQuotes "$KLI_DEV_ROOT_DIR"  ); KLI_DEV_ROOT_DIR="${KLI_DEV_ROOT_DIR/#~/$HOME}"
	KLI_ARCHIVE="$KLI_DEV_ROOT_DIR/archive"


    # identify per-project config file

    CONFIG_LOCAL="$( kli::getProjectDir )/.kli.conf"

	KLI_TEMPLATE_ROOT_DIR=$( kli::configVar TEMPLATES ROOT_DIR   );    KLI_TEMPLATE_ROOT_DIR="${KLI_TEMPLATE_ROOT_DIR:-~/.config/kli/Templates}";      KLI_TEMPLATE_ROOT_DIR="${KLI_TEMPLATE_ROOT_DIR/#~/$HOME}"
	KLI_DEFAULT_LICENSE=$( 	 app::configVar KLI DEFAULT_LICENSE  );    KLI_DEFAULT_LICENSE="${KLI_DEFAULT_LICENSE:-GPLv3}"
	KLI_PROJECT_LICENSE=$( 	 kli::configVar PROJECT LICENSE      );    KLI_PROJECT_LICENSE="${KLI_PROJECT_LICENSE:-$KLI_DEFAULT_LICENSE}"
	KLI_LOG=$( 	             app::configVar KLI LOG              );    KLI_LOG="${KLI_LOG:-~/.local/state/kli/kli.log}";                               APP_LOG="${KLI_LOG/#~/$HOME}"
	KLI_PROJECT_TYPE=$(      kli::configVar PROJECT TYPE         );    KLI_PROJECT_TYPE="${KLI_PROJECT_TYPE:-script}"
	KLI_PROJECT_LANGUAGE=$(  kli::configVar PROJECT LANGUAGE     );    KLI_PROJECT_LANGUAGE="${KLI_PROJECT_LANGUAGE:-unknown}"

	KLI_PROJECT=$(           kli::detectProject )
	KLI_PROJECT_DIR=$(       kli::getProjectDir )
    KLI_AUTHOR=$(            kli::configVar PROJECT AUTHOR       )
    KLI_AUTHOR_EMAIL=$(      kli::configVar PROJECT AUTHOR_EMAIL )

    KLI_REPO_AUR=$(          kli::configVar PROJECT AUR          )
    KLI_REPO_GITHUB=$(       kli::configVar PROJECT GITHUB       )

}


kli::configVar () {

	local VALUE=""

	[[ -f $CONFIG_LOCAL               ]] && VALUE=$(crudini --get "$CONFIG_LOCAL" "$1" "$2" 2>/dev/null )
	[[ ! -f $CONFIG_USER              ]] && cp "$CONFIG_GLOBAL" "$CONFIG_USER"
	[[ -z "$VALUE" && -f $CONFIG_USER ]] && VALUE=$(crudini --get "$CONFIG_USER"  "$1" "$2" 2>/dev/null )


	echo $(string::stripQuotes "$VALUE")

}


kli::configVarSet () {

    app::message "info echo log" "setting local variable $1 $2 to $3"
    crudini --set "$CONFIG_LOCAL" "$1" "$2" "$3"

}


kli::examples () {

echo "Usage examples"
echo
echo "kli github create repo"
echo
echo "kli github push"
echo
echo "kli info show log --count 20"
echo
echo "kli project config --author \"Tom Brown\" --email tom@CarlsonSpeed.com"
echo
echo "kli project config --github true --aur true --type library --language C++"
echo
echo "kli project scaffold --classname BatchForge"
echo
echo "kli project archive --comment \"working with production data\""
echo
echo "kli project config show"
echo
echo "kli build clean ; kli run"

}


kli::run () {


    if [[ "$KLI_PROJECT_TYPE" == "Plasmoid" ]]; then

        kbuildsycoca6 --noincremental
        killall plasmashell && kstart plasmashell
        #kquitapp6 plasmashell ; kstart plasmashell
        #plasmawindowed org.kde.videokit.monitor
        plasmoidviewer package --applet org.kde.videokit.monitor

    elif [[ "$KLI_PROJECT_TYPE" == "library" ]]; then

        local PROJECT_ROOT="$( kli::getProjectRoot )"
        local CMAKE="$PROJECT_ROOT/CMakeLists.txt"
        local EXECUTABLE="$( grep -m 1 "add_executable" CMakeLists.txt | awk -F'(' '{print $2}' )"
        local TARGET="$PROJECT_ROOT/build/$EXECUTABLE"
        echo "$TARGET"
        [[ -e "$TARGET" ]] && "$TARGET"

    fi

}


kli::build() {

    # navigate to the build base

    cd "$KLI_PROJECT_DIR"
    [[ -n "$KLI_REPO_GITHUB" ]] && cd "github/$KLI_PROJECT"
    echo "$( pwd )"


    # create build directory

    mkdir -p build
    cd build


    # build

    cmake ..
    cmake --build .


    # install


    INSTALL_TARGET=$(cmake -LA -N . | grep '^CMAKE_INSTALL_PREFIX:' | cut -d= -f2)
    [[ -w "$INSTALL_TARGET" ]] && cmake --install . || sudo cmake --install .

}


kli::buildClean () {

    # build project

    cd "$KLI_PROJECT_DIR"
    [[ -n "$KLI_REPO_GITHUB" ]] && cd "github/$KLI_PROJECT"
    [[ -e "build" ]] && rm -Rf build

    kli::build
}


kli::inProject () {

    local RESULT
    [[ -n "$( kli::detectProject )" ]] && RESULT=0 || RESULT=1


    return "$RESULT"
}


kli::detectProject () {

    local DIR_CURRENT="$PWD"
    local PROJECT


    # check to see if we are under the development directory structure

    if [[ "$DIR_CURRENT" == "$KLI_DEV_ROOT_DIR"* ]]; then
		PATH_REL="${DIR_CURRENT#$KLI_DEV_ROOT_DIR/}"
		PROJECT="${PATH_REL%%/*}"
    fi


    echo "$PROJECT"
}


kli::detectRepo () {

    local DIR_CURRENT="$PWD"
    local PROJECT="$( kli::detectProject )"
    local PROJECT_DIR="$( kli::getProjectDir )"
    local REPO


    # check to see if we are in a repo

    if [[ kli::inProject ]]; then
        if [[ "$DIR_CURRENT" == "$KLI_DEV_ROOT_DIR"* ]]; then
            PATH_REL="${DIR_CURRENT#$PROJECT_DIR/}"
            REPO="${PATH_REL%%/*}"
        fi
    fi


    # only github and AUR repos detected

    [[ "$REPO" == "github" || "$REPO" == "AUR" ]] || REPO=""


    echo "$REPO"
}


kli::getProjectDir () {

    local PROJECT="$( kli::detectProject )"
    echo "$KLI_DEV_ROOT_DIR/$PROJECT"

}

kli::getProjectRoot () {

    local PROJECT="$( kli::getProjectDir )"
    if  [[ -n "$KLI_REPO_GITHUB" ]]; then
        PROJECT="$PROJECT/github/$KLI_PROJECT"
    fi


    echo "$PROJECT"
}


kli::createRepos2 () {

    if kli::inProject; then

        echo "inProject $KLI_PROJECT_TYPE"
        if   [[ "$KLI_PROJECT_TYPE" == "Plasmoid" ]]; then

            app::message "info echo" "building local repo structures for type $KLI_PROJECT_TYPE"
            cd "$( kli::getProjectDir )"
            if [[ "$( kli::configVar PROJECT GITHUB )" == "true" ]]; then

                if [[ "$KLI_PROJECT_LANGUAGE" == *"QML"* ]]; then

                    app::message "info echo log" "building local github repo structures for a QML Plasmoid"
                    mkdir -p "github/$KLI_PROJECT/package/contents/ui"
                    template::fetch "main" "QML"

                fi
                if [[ "$KLI_PROJECT_LANGUAGE" == *"C++"* ]]; then

                    app::message "info echo log" "building local github repo structures for a C++ Plasmoid"
                    mkdir -p "github/$KLI_PROJECT/src"
                    mkdir -p "github/$KLI_PROJECT/package/contents/code"
                    template::fetch "myClass" "C++"

                fi

            fi

            if [[ "$( kli::configVar PROJECT AUR )" == "true" ]]; then

                mkdir -p "AUR/$KLI_PROJECT"

            fi

        fi

    fi

}


kli::createRepos () {

    local FILE_MAP="$( kli::getProjectDir )/file.map"
    local GITHUB_ROOT="$( github::getProjectDir )"


    # process the

    echo "$FILE_MAP"
    while IFS= read -r line; do

        # Skip blank lines and comments

        [[ -z "$line"                   ]] && continue
        [[ "$line" =~ ^[[:space:]]*';'  ]] && continue

        # Process lines starting with "

        if [[ "$line" =~ ^[[:space:]]*\" ]]; then
            IFS=',' read -r FILENAME TEMPLATE DEVELOPMENT RELEASE REPOSITORY PERMISSIONS <<< "$line"

            REPOSITORY="$( string::trim $REPOSITORY )"

            if [[ "$REPOSITORY" == "github" ]]; then

                echo "$FILENAME $REPOSITORY"

            fi

        fi

    done < "$FILE_MAP"

}


kli::detectProjectType () {

    local dir="$PWD"
    while [[ "$dir" != "/" ]]; do
        if [[ -f "$dir/CMakeLists.txt" ]]; then
            echo "cmake"
            return 0
        elif [[ -f "$dir/Makefile" ]]; then
            echo "make"
            return 0
        elif [[ -f "$dir/meson.build" ]]; then
            echo "meson"
            return 0
        elif [[ -d "$dir/.git" ]]; then
            echo "git"
            return 0
        elif [[ -f "$dir/package.json" ]]; then
            echo "node"
            return 0
        elif [[ -f "$dir/pyproject.toml" ]] || [[ -f "$dir/setup.py" ]]; then
            echo "python"
            return 0
        elif [[ -f "$dir/.kdev4" ]] || [[ -f "$dir/.kdevproject" ]]; then
            echo "kdevelop"
            return 0
        elif [[ -d "$dir/.plasmoid" ]] || [[ -f "$dir/metadata.desktop" ]]; then
            echo "plasmoid"
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    echo "unknown"
    return 1
}


kli::archive () {

    local COMMENT="$1"


    # insure archive directory exists

    mkdir -p "$KLI_ARCHIVE"


    # build target archive filename

    local TIMESTAMP=$(date +%Y%m%d-%H%M)
    local TARGET_FILENAME="$KLI_PROJECT-$KLI_PROJECT_LANGUAGE-$TIMESTAMP"
    if [[ -n "$COMMENT" ]]; then
        COMMENT="${COMMENT// /_}"
        TARGET_FILENAME="$TARGET_FILENAME-$COMMENT"
    fi
    TARGET_FILENAME="$TARGET_FILENAME.tgz"


    # archive

    app::message "info echo log" "project $KLI_PROJECT archived to $TARGET_FILENAME"
    cd "$KLI_PROJECT_DIR/.."
    tar -czf "$TARGET_FILENAME" "$KLI_PROJECT" && mv "$TARGET_FILENAME" "$KLI_ARCHIVE"

}
