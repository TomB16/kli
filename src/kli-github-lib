#!/bin/bash

#
# This file is part of videokit-kde.
# Copyright (C) 2025 Tom Brown
#
# videokit-kde is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# videokit-kde is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#


# source utility package

[[ -n "${__KLI_GITHUB_LIB_SH__}" ]] && return ; readonly __KLI_GITHUB_LIB_SH__=1


source bashdev-string
source kli-lib


# configuration

github::getProjectDir() {

    local PROJECT_DIR="$KLI_PROJECT_DIR/github/$KLI_PROJECT"


    echo "$PROJECT_DIR"
}


github::createDir() {

    local PROJECT_DIR="$( github::projectDir )"
    if [[ ! -e "$PROJECT_DIR" ]]; then
        app::message "info echo log" "creating $PROJECT_DIR directory"
        mkdir -p "$PROJECT_DIR"
    fi
}


github::createRepoOld() {

    local PROJECT="$( kli::detectProject )"
    local PROJECT_DIR="$( github::getProjectDir )"


    if [[ "$KLI_PROJECT_TYPE" == "BASH" ]]; then

        if   [[ ! -d "src"     ]]; then app::message "warning echo" "no src directory"
        elif [[ ! -e LICENSE   ]]; then app::message "warning echo" "no LICENSE file"
        elif [[ ! -e README.md ]]; then app::message "warning echo" "no README.md file"
        else

            app::message "info echo log" "git init in directory $PWD"
            git init --initial-branch=master

            if [[ $? ]]; then
                app::message "info echo log" "git add src LICENSE README.md"
                git add src LICENSE README.md
            fi

            if [[ $? ]]; then
                app::message "info echo log" "git initial commit"
                git commit -m "initial commit"
            fi

            if [[ $? ]]; then
                app::message "info echo log" "git create remote repo"
                gh repo create $PROJECT --public --source=. --remote=origin --push
            fi
        fi
    fi
}


github::createRepo() {

    if [[ "$KLI_REPO_GITHUB" == true ]]; then

        app::message "info echo log" "git init in directory $PWD"
        git init --initial-branch=master

        if [[ $? ]]; then
            github::gitAddAll
        fi

        if [[ $? ]]; then
            app::message "info echo log" "git initial commit"
            git commit -m "initial commit"
        fi

        if [[ $? ]]; then
            app::message "info echo log" "git create remote repo"
            gh repo create $PROJECT --public --source=. --remote=origin --push
        fi

    else

        app::message "info echo" "no github repo for this project"

    fi
}


github::updateRepo() {

    local COMMENT="$1:-no comment"

    if [[ "$KLI_REPO_GITHUB" == true ]]; then

        app::message "info echo log" "git update in directory $PWD"

        github::gitAddAll

        if [[ $? ]]; then
            app::message "info echo log" "git initial commit"
            git commit -m "$COMMENT"
        fi

        if [[ $? ]]; then
            app::message "info echo log" "git push"
            git push
        fi

    else

        app::message "info echo" "no github repo for this project"

    fi
}

github::gitAddAll() {

    local FILE_MAP="$KLI_PROJECT_DIR/file.map"

    if [[ -e "$FILE_MAP" ]]; then
        cd "$( github::getProjectDir )"
        while IFS= read -r line; do

            # Skip blank lines and comments

            [[ -z "$line" ]] && continue
            [[ "$line" =~ ^[[:space:]]*';' ]] && continue

            # Process lines starting with "

            if [[ "$line" =~ ^[[:space:]]*\" ]]; then
                IFS=',' read -r FILENAME TEMPLATE DEVELOPMENT RELEASE REPOSITORY PERMISSIONS <<< "$line"

                REPOSITORY="$( string::trim $REPOSITORY )"

                if [[ "$REPOSITORY" == *"github"* ]]; then

                    FILENAME="$( string::stripQuotes $FILENAME )"
                    if [[ -e "$FILENAME" ]]; then
                        app::message "info echo log" "project $KLI_PROJECT git add $FILENAME"
                        git add "$FILENAME"
                    else
                        app::message "warning echo log" "project $KLI_PROJECT file $FILENAME missing so cannot add to git repository"
                    fi

                fi

            fi

        done < "$FILE_MAP"

    else

        app::message "warning echo log" "project $KLI_PROJECT file.map not available"

    fi

}
