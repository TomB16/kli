#!/bin/bash

#
# This file is part of videokit-kde.
# Copyright (C) 2025 Tom Brown
#
# videokit-kde is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# videokit-kde is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#


# source utility package

[[ -n "${__KLI_TEMPLATE_LIB_SH__}" ]] && return ; readonly __KLI_TEMPLATE_LIB_SH__=1


source  bashdev-app
source  bashdev-string
source  kli-aur-lib
source  kli-github-lib


TARGET_FILE_MAP="$KLI_PROJECT_DIR"


template::scaffold() {

    template::fileMapCreate
    template::fileMapFetch

}


template::fileMapFetch() {

    if [[ -f "$KLI_PROJECT_FILE_MAP" ]]; then

        while IFS= read -r line || [[ -n "$line" ]]; do

            # Skip empty lines and lines starting with ';'

            if [[ ${line:0:1} == '"' ]]; then

                # Parse the CSV fields (quoted values)

                IFS=',' read -r FILENAME TEMPLATE DEVELOPMENT RELEASE REPOSITORY PERMISSIONS <<< "$line"

                # Trim quotes and spaces from each field

                FILENAME="$(    string::trim $FILENAME    )";           FILENAME="$(    template::substituteVars $FILENAME    )"
                TEMPLATE="$(    string::trim $TEMPLATE    )";           TEMPLATE="$(    template::substituteVars $TEMPLATE    )"

                DEVELOPMENT="$( string::trim $DEVELOPMENT )";           DEVELOPMENT="$( template::substituteVars $DEVELOPMENT )"
                RELEASE="$(     string::trim $RELEASE     )";           RELEASE="$(     template::substituteVars $RELEASE     )"
                REPOSITORY="$(  string::trim $REPOSITORY  )";           REPOSITORY="$(  template::substituteVars $REPOSITORY  )"
                PERMISSIONS="$( string::trim $PERMISSIONS )";           PERMISSIONS="$( template::substituteVars $PERMISSIONS )"


                # fetch the file

                template::fileMapFetchFile "$FILENAME" "$TEMPLATE" "$DEVELOPMENT" "$RELEASE" "$REPOSITORY" "$PERMISSIONS"

            fi

        done < "$KLI_PROJECT_FILE_MAP"

    fi

}


template::fileMapFetchFile(){

    local FILENAME="$(             string::stripQuotes $1 )"
    local FILENAME_TEMPLATE="$(    string::stripQuotes $2 )"
    local FILENAME_DEVELOPMENT="$( string::stripQuotes $3 )"
    local FILENAME_RELEASE="$(     string::stripQuotes $4 )"
    local FILE_REPOSITORY="$(      string::stripQuotes $5 )"
    local FILE_PERMISSIONS="$(     string::stripQuotes $6 )"


    # fully qualify the filename

    if [[ -z "$REPOSITORY"            ]]; then FILENAME="$KLI_PROJECT_DIR/$FILENAME"
    elif [[ "$REPOSITORY" == "AUR"    ]]; then FILENAME="$KLI_PROJECT_DIR/AUR/$KLI_PROJECT/$FILENAME"
    elif [[ "$REPOSITORY" == "github" ]]; then FILENAME="$KLI_PROJECT_DIR/github/$KLI_PROJECT/$FILENAME"
    fi


    # handle file.map row

    if   [[ -z "$FILENAME_TEMPLATE"   ]]; then :
    elif [[ -e "$FILENAME"            ]]; then app::message "warning echo" "file $FILENAME exists (not overwritten)"
    elif [[ ! -e "$FILENAME_TEMPLATE" ]]; then app::message "warning echo" "template $FILENAME_TEMPLATE not found"
    else
        app::message "info echo log" "project $KLI_PROJECT created $FILENAME from template"
        FILEPATH="${FILENAME%/*}"
        mkdir -p "$FILEPATH"
        cp "$FILENAME_TEMPLATE" "$FILENAME"
        template::substituteFile "$FILENAME"
    fi

}


KLI_PROJECT_FILE_MAP="$KLI_PROJECT_DIR/file.map"

template::fileMapCreate() {

    # source

    local TEMPLATE_FILE_MAP="$KLI_TEMPLATE_ROOT_DIR/map/$KLI_PROJECT_TYPE.$KLI_PROJECT_LANGUAGE.file.map"


    # target



    # action

    if   [[ ! -f "$TEMPLATE_FILE_MAP"    ]]; then app::message "warning echo" "$KLI_PROJECT_FILE_MAP not found in TEMPLATE library"
    elif [[   -f "$KLI_PROJECT_FILE_MAP" ]]; then app::message "warning echo" "project already has $KLI_PROJECT_FILE_MAP (not overwritten)"
    else
        app::message "info echo log" "project $KLI_PROJECT fetch $TEMPLATE_FILE_MAP for project $KLI_PROJECT"
        cp "$TEMPLATE_FILE_MAP" "$KLI_PROJECT_FILE_MAP"
    fi

}


# Declare associative array
declare -A VARMAP=(
    ["%{TEMPLATES}"]="$HOME/.config/kli/templates"
    ["%{USER_PLASMOID}"]="$HOME/.local/share/plasma/plasmoids"
    ["%{GLOBAL_PLASMOID}"]="/usr/share/plasma/plasmoids"
    ["%{PLASMOID}"]="org.example.ffmpegmonitor"
    ["%{QT_PLUGIN_PATH}"]="$HOME/.local/share/qt5/plugins"
    ["%{GLOBAL_QT_PLUGIN}"]="/usr/lib/qt/plugins"
    ["%{APPNAME}"]="$KLI_PROJECT"
    ["%{APPNAMELC}"]="$KLI_PROJECT,,"
    ["%{APPNAMEUC}"]="$KLI_PROJECT^^"
    ["%{CLASSNAME}"]="$KLI_CLASSNAME"
    ["%{CLASSNAMELC}"]="$KLI_CLASSNAME,,"
    ["%{CLASSNAMEUC}"]="$KLI_CLASSNAME^^"
    ["%{AUTHOR}"]="$KLI_AUTHOR"
    ["%{YEAR}"]="$( date +%Y )"
    ["%{CURRENT_YEAR}"]="$( date +%Y )"
    ["%{DATE}"]="$( date +%F )"
    ["%{LANGUAGE}"]="$KLI_PROJECT_LANGUAGE"
    ["%{LICENSE}"]="$KLI_PROJECT_LICENSE"
)


template::substituteVars() {
    local STR="$1"
    for KEY in "${!VARMAP[@]}"; do
        STR="${STR//${KEY}/${VARMAP[$KEY]}}"
    done
    printf '%s' "$STR"
}


template::substituteFile() {
    local FILENAME="${1:?FILENAME required for template::substituteFile}"

    local SED_EXPR=""
    for KEY in "${!VARMAP[@]}"; do
        # Escape delimiter characters safely for use in sed
        local VALUE="${VARMAP[$KEY]}"
        VALUE="${VALUE//\\/\\\\}"   # Escape backslashes
        VALUE="${VALUE//\//\\/}"    # Escape forward slashes
        VALUE="${VALUE//&/\\&}"     # Escape ampersands (sed replacement special)
        SED_EXPR+="s|$KEY|$VALUE|g;"
    done

    local TMPFILE="$(mktemp)"
    sed "$SED_EXPR" "$FILENAME" > "$TMPFILE" && mv "$TMPFILE" "$FILENAME"
}
